// Schema File

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  phone            String
  address          String
  taxId            String
  taxIdType        String
  discountPassword String
  users            User[]
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  name         String
  email        String
  phone        String
  gender       String
  employeeId   String
  password     String
  role         String     @default("staff")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([email])
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  tax         String
  products    Products[]
  subcategory Subcategory[]
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([name])
}

model Subcategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String     @db.ObjectId
  products   Products[]
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([name])
}

model Products {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String      @unique
  measuredIn    String?     @default("")
  price         String
  code          String
  tax           String?
  taxType       String?
  quantity      Int         @default(0)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.ObjectId
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String      @db.ObjectId
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Billing {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  products  Json       @default("[]")
  kotList   Kot[]
  subTotal  Float      @default(0)
  discount  Float      @default(0)
  tax       Float      @default(0)
  netAmount Float      @default(0)
  status    BillStatus @default(UNSETTLED)
  tableId   String     @db.ObjectId
  table     Tables     @relation(fields: [tableId], references: [id])
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Tables {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  billing   Billing[]
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Kot       Kot[]
}

model Kot {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  status    KotStatus @default(ORDER_CONFIRMED)
  kotData   KotItem[]
  modifier  String
  billingId String?   @db.ObjectId
  billing   Billing?  @relation(fields: [billingId], references: [id])
  tableId   String?   @db.ObjectId
  table     Tables?   @relation(fields: [tableId], references: [id])
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

type KotItem {
  productId String @db.ObjectId
  quantity  Int
}

type OrderedProducts {
  products Json
  quantity Int
}

enum BillStatus {
  UNSETTLED
  SETTLED
  VOID
  COMPLEMENTORY
}

enum KotStatus {
  ORDER_CONFIRMED
  ORDER_CANCELED
}
